require 'rspec'
require './pather.rb'

describe Pather do
  describe "with valid input" do
    describe "with the provided sample input" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....#...................
          ........................
          ........................
          ........................
          ........................
          ..................#.....
          ........................
          ........................
          ........................
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....#...................
          ....*...................
          ....*...................
          ....*...................
          ....*...................
          ....**************#.....
          ........................
          ........................
          ........................
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
    describe "with the hash character positions reversed" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ..................#.....
          ........................
          ........................
          ........................
          ........................
          ....#...................
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ..................#.....
          ..................*.....
          ..................*.....
          ..................*.....
          ..................*.....
          ....#**************.....
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
    describe "with only one line difference" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....#...................
          ..................#.....
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....#...................
          ....**************#.....
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
    describe "with hashes in the same line" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....#.............#.....
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....#*************#.....
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
    describe "with hashes in the same column" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ....#...................
          ........................
          ....#...................
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ....#...................
          ....*...................
          ....#...................
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
    describe "with adjacent hashes in the same line" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....##..................
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
          ....##..................
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
    describe "with adjacent hashes in the same column" do
      it "should match the expected output" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ....#...................
          ....#...................
          ........................
        EOS
        @expected = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ....#...................
          ....#...................
          ........................
        EOS
        expect(Pather.new(@input.lines).draw_path).to eq @expected
      end
    end
  end

  describe "with invalid input" do
    describe "with no hash characters" do
      it "should raise an error" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ........................
        EOS
        expect{ Pather.new(@input.lines).draw_path }.
            to raise_error(ArgumentError, "Incorrect hash symbol number!!! except exactly two hash symbols.")
      end
    end
    describe "with only one hash character" do
      it "should raise an error" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ....#...................
          ........................
        EOS
        expect{ Pather.new(@input.lines).draw_path }.
            to raise_error(ArgumentError, "Incorrect hash symbol number!!! except exactly two hash symbols.")
      end
    end
    describe "with more than two hash characters (on three lines)" do
      it "should raise an error" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ..............#.........
          ....#...................
          ..................#.....
        EOS
        expect{ Pather.new(@input.lines).draw_path }.
            to raise_error(ArgumentError, "Incorrect hash symbol number!!! except exactly two hash symbols.")
      end
    end
    describe "with non-rectangular text" do
      it "should raise an error" do
        @input = <<-EOS.gsub(/^ {10}/, '')
          ........................
          ....#.................
          ..............#.........
        EOS
        expect{ Pather.new(@input.lines).draw_path }.
            to raise_error(ArgumentError, "All lines in input file are expected to have the same number of characters.")
      end
    end
  end
end
